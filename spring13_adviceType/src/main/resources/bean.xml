<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
                           http://www.springframework.org/schema/beans/spring-beans.xsd
		                   http://www.springframework.org/schema/aop
		                   http://www.springframework.org/schema/aop/spring-aop-4.0.xsd">

    <!--配置spring的ioc，把service对象配置进来-->
    <bean id="accountService" class="com.wh.service.impl.AccountServiceImpl"></bean>


    <!--配置Logger类-->
    <bean id="logger" class="com.wh.utils.Logger"></bean>

    <!--配置aop-->
    <aop:config>
        <!--配置切入点表达式： id属性用于指定表达式的唯一标识。expression属性用于指定表达式内容
                此标签写在aop:aspect标签内部只能当前切面使用
                它还可以写在aop:aspect外面，此时就变成了所有切面可用
            -->
        <aop:pointcut id="pt1" expression="execution(* com.wh.service.impl.*.*(..))"/>
        <aop:aspect id="logAdvice" ref="logger">

            <!--前置通知：在切入点方法执行之前执行
            <aop:before method="beforePrintLog" pointcut-ref="pt1"></aop:before>-->
            <!--后置通知：在切入点方法执行之后执行。它永远和异常通知只能执行一个
            <aop:after-returning method="afterReturnPrintLog"  pointcut-ref="pt1"></aop:after-returning>-->
            <!--异常通知：在切入点方法执行产生异常之后执行。它永远和后置通知只能执行一个
            <aop:after-throwing method="afterThrowingPrintLog"  pointcut-ref="pt1"></aop:after-throwing>-->
            <!--最终通知：无论切入点方法是否正常都执行
            <aop:after method="afterPrintLog"  pointcut-ref="pt1"></aop:after>-->

            <!--配置环绕通知-->
            <aop:around method="aroundPrintLog" pointcut-ref="pt1"></aop:around>

        </aop:aspect>
    </aop:config>

</beans>